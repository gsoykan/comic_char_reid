# @package _global_

# python train.py -m hparams_search=comics experiment=example

defaults:
  - override /hydra/sweeper: optuna

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/acc_best"

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 50

    # choose Optuna hyperparameter sampler
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 12345
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define range of hyperparameters
    search_space:
      model.inter_panel_net_props.sequence_layer_configs.num_encoder_layers:
        type: categorical
        choices: [ 6, 12, 18 ]
      model.inter_panel_net_props.sequence_layer_configs.num_heads:
        type: categorical
        choices: [ 8, 16, 32 ] # this should be divisor of input embedding
      model.inter_panel_net_props.sequence_layer_configs.dim_feedforward:
        type: categorical
        choices: [ 1024, 2048, 3072 ]
